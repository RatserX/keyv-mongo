const delay = require('delay');
const Keyv = require("keyv");
const KeyvMongoDatabase = require("this");
const MongoDbHelper = require("../../helpers/mongodb.helper");
const test = require("ava");
const timekeeper = require('timekeeper');

const _delay2 = _interopRequireDefault(delay);
const _timekeeper2 = _interopRequireDefault(timekeeper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const mongoDatabaseUri = MongoDbHelper.getUri();
const options = {
    collection: "keyv"
};
const store = () => new KeyvMongoDatabase(mongoDatabaseUri, options);

test.serial('.set(key, value) returns a Promise', t => {
    const keyv = new Keyv({ store: store() });
    t.true(keyv.set('foo', 'bar') instanceof Promise);
});

test.serial('.set(key, value) resolves to true', (() => {
    var _ref2 = _asyncToGenerator(function* (t) {
        const keyv = new Keyv({ store: store() });
        t.is((yield keyv.set('foo', 'bar')), true);
    });

    return function (_x) {
        return _ref2.apply(this, arguments);
    };
})());

test.serial('.set(key, value) sets a value', (() => {
    var _ref3 = _asyncToGenerator(function* (t) {
        const keyv = new Keyv({ store: store() });
        yield keyv.set('foo', 'bar');
        t.is((yield keyv.get('foo')), 'bar');
    });

    return function (_x2) {
        return _ref3.apply(this, arguments);
    };
})());

test.serial('.set(key, value, ttl) sets a value that expires', (() => {
    var _ref4 = _asyncToGenerator(function* (t) {
        const ttl = 1000;
        const keyv = new Keyv({ store: store() });
        yield keyv.set('foo', 'bar', ttl);
        t.is((yield keyv.get('foo')), 'bar');
        if (keyv.opts.store.ttlSupport === true) {
            yield (0, _delay2.default)(ttl + 1);
        } else {
            _timekeeper2.default.freeze(Date.now() + ttl + 1);
        }
        t.is((yield keyv.get('foo')), undefined);
        _timekeeper2.default.reset();
    });

    return function (_x3) {
        return _ref4.apply(this, arguments);
    };
})());

test.serial('.get(key) returns a Promise', t => {
    const keyv = new Keyv({ store: store() });
    t.true(keyv.get('foo') instanceof Promise);
});

test.serial('.get(key) resolves to value', (() => {
    var _ref5 = _asyncToGenerator(function* (t) {
        const keyv = new Keyv({ store: store() });
        yield keyv.set('foo', 'bar');
        t.is((yield keyv.get('foo')), 'bar');
    });

    return function (_x4) {
        return _ref5.apply(this, arguments);
    };
})());

test.serial('.get(key) with nonexistent key resolves to undefined', (() => {
    var _ref6 = _asyncToGenerator(function* (t) {
        const keyv = new Keyv({ store: store() });
        t.is((yield keyv.get('foo')), undefined);
    });

    return function (_x5) {
        return _ref6.apply(this, arguments);
    };
})());
